/**
  ******************************************************************************
  * @file    udp_socket.h
  * @author  Trembach D.N.
  * @version V2.5.0
  * @date    21-08-2020
  * @brief   Файл содержит функции контроля UDP  
  ******************************************************************************
  * @attention
  * 
  * 
  ******************************************************************************
  */
	
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __UDP_SOCKET_H
#define __UDP_SOCKET_H

/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "lwip/debug.h"
#include "lwip/stats.h"
#include "lwip/udp.h"
#include "lwip/ip_addr.h"	

/* Прописываем указатель на функцию контроля соединение ethernet */
#define link_ethernet()   (StatusLinkETH())   /* флаг LwIP - состояние физического соединения */

/* Exported types ------------------------------------------------------------*/
/* Exported constants --------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
/* Exported functions ------------------------------------------------------- */
    
/* перечисление статусов UDP сокета */
typedef enum { 
  NONE_UDP = 0,  /* UDP сокет не инициализирован                 */
  INIT_UDP,      /* инициализация UDP сокета                     */
  READY_UDP,     /* UDP сокет готов к работе                     */
  ERROR_PCB_UDP, /* Ошибка при создании PCB UDP сокета           */
  ERROR_BIND_UDP /* Ошибка при установке UDP сокета на прослушку */ 
} Status_UDP_t;

typedef void (*udp_txtrans_fn)(void *arg);

/* структура контроля UDP сокета   */ 
typedef struct
{
  ip_addr_t SrcIPaddr;        /* источник IP адрес	                           */
  uint16_t local_port;	      /* источник сервера	                           */
  Status_UDP_t status;        /* состояния соединения                              */
  struct udp_pcb *pcb;	      /* указатель на блок контроля соединения сервера     */
  const char * pcName;        /* текстовое имя задачи (для удобства отладки)       */
                              /*                                                   */
  udp_recv_fn recv;           /* указатель на функцию обработки принятых данных    */
                              /* функция может быть вида                           */
                              /**
                                * @brief Эта функция приема пакета на порт UDP.
                                * @param arg аргумент пользователя ((udp_socket_t *)arg)
                                * @param pcb udp_pcb который принял данные 
                                * @param p буфер пакета который был принят
                                * @param addr удаленное IP address с которого пакет был принят
                                * @param port удаленный порт с которого пакет был принят
                                * @retval None
                                */
                              /* void UDP_Receive_Socket(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port) */
                              /* {                                                                                                          */
                              /* 	// вставить обработку данных                                                                        */
                              /*                                                                                                            */
                              /* 	                                                                                                    */
                              /*   // освобождаем принятый буфер                                                                            */
                              /*   pbuf_free(p);                                                                                            */
                              /* }                                                                                                          */ 
  
  
  void (*init_task)(void *arg);
                              /* указатель на функцию инициализации ресурсов задачи                                            */
                              /*  запускается до соединения и один раз                                                         */
                              /*  // Пример обьявления def для доступа к структуре,                                            */
                              /*  // указатель на которую передан в функцию в виде аргумента                                   */
                              /* #define UDP_Socket ((udp_socket_t *)arg)                                                      */
                              /*                                                                                               */
                              /* // Пример функции                                                                             */
                              /**                                                                                           
                                 * @brief Функция инициализации ресурсов задачи                                              
                                 * @param arg аргумент пользователя ((udp_socket_t *)arg)                                    
                                 * @retval None                                                                              
                                 */                                                                                          
                              /* void UDP_Init_Task_gate(void *arg)                                                            */
                              /* {                                                                                             */
                              /*      Здесь размещаем все функции которые отрабатывают один раз                                */
                              /*      Например инициализация очередей, портов, мьютексов                                       */
                              /*      Инициализация периферии                                                                  */
                              /*                                                                                               */
                              /*                                                                                               */
                              /*   // Доступ к структуре из аргумента через DEF                                                */
                              /*   uint16_t port  =  UDP_Socket->local_port;                                                   */
                              /*   // Доступ к структуре непосредственно через аргумент                                        */
                              /*   uint16_t port  =  ((udp_socket_t *)arg)->local_port;                                        */
                              /* }                                                                                             */
                              /* // Пример установки указателя на функцию                                                      */
                              /* //установка функции инициализации задачи                                                      */
                              /* udp_socket.init_task = UDP_Init_Task_gate;                                                    */
                                                                                                                            
  void (*body_task)(void *arg);  
                              /* указатель на функцию отработки тела задачи                                                    */
                              /*  вызывантся периодически с периодом uint16_t   control_time                                   */
                              /*  Функция описывается аналогично функции init_task                                             */
  
  /*=============================== Програмный таймер для периодического вызова задачи ========================================*/ 
  TimerHandle_t  SoftTimerForTask;      /* указатель на программный таймер                                                     */
  const char *   pcSoftTimerName;       /* имя таймера - для отладки                                                           */
  void  (*SoftTimerCB)( TimerHandle_t xTimer );/* callback програмного таймера вызова задачи                                   */
  /*===========================================================================================================================*/   
  TickType_t xLastWakeTime;   /* вспомогательная переменная для формирования периодического вызова задачи контроля соединения  */
  uint16_t   control_time;    /* период активности задачи в тиках системы                                                      */
  /*===========================================================================================================================*/     
  TaskHandle_t  HandleTask;   /* Указатель на задачу - используется для отправки сообщений в задачу                            */
  uint32_t      NotifiedValue;/* Содержимое сообщения полученного задачей                                                      */
  
  err_t err;                  /* ошибка при соединении	                                                                       */
  struct pbuf  *p;            /* указатель на буфер передаваемого пакета                                                       */
  /*===========================================================================================================================*/ 
}udp_socket_t;

/**
  * @brief Эта функция вызывается когда клиент UDP отправляет сообщение.
  * @param uint8_t *data_box указатель на передаваемый буфер       
  * @param uint16_t size_box размер передаваемых данных
  * @param udp_socket_t * udp_sock указатель на структуру соединения
  * @param uint32_t DestIPaddr ip адресс назначения
  * @param uint16_t DestIPport ip порт назначения
  * @retval 0 - пакет отправлен
  *         1 - пакет не отправлен - отсутствует соединение 
  *         2 - пакет не отправлен - ошибка выделения памяти
  */
uint8_t UDP_Send_Socket(uint8_t *data_box ,uint16_t size_box, udp_socket_t *udp_sock,  uint32_t DestIPaddr ,uint16_t DestIPport);

/**
  * @brief  Задача для контроля сокета UDP
  * @param  *pvParameters - указатель на структуру соединения
  * @retval None
  */
void UDP_Task_Socket(void * pvParameters);

#endif /* __UDP_SOCKET_H */
/************************ (C) COPYRIGHT DEX *****END OF FILE****/

