/**
  ******************************************************************************
  * @file    codec_cmx.h
  * @author  Trembach Dmitry
  * @version V1.0.0
  * @date    19-04-2020
  * @brief   Инициализация задачи контроля SPI кодека
  *
  ******************************************************************************
  * @attention
  * 
  * 
  *
  * <h2><center>&copy; COPYRIGHT 2020 DataExpress</center></h2>
  ******************************************************************************
  */

#ifndef _CODEC_CMX_H
#define _CODEC_CMX_H

#include "stm32f4xx.h"
#include "main.h"
#include "cmx618_reg.h"
#include "stm32f4xx.h"
#include "main.h"
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"
#include "soft_router.h"   
#include "rs_frame_header.h"  
#include "router_streams.h" 
#include "core_cntrl_diag.h" 



/* Максимальное число кодеков */
#define  MAX_CODEC              (3)
#define  MAX_CODEC_ARRAY        (3)

#define  CODEC_A_PCM_CMX      (0)
#define  CODEC_B_PCM_CMX      (1)
#define  CODEC_C_PCM_CMX      (2)

#define  PCM_TYPE_BOX     ((5)<<5)

#define  SIZE_SAMPLE_BUFF (480)          /* Число выборок в пакете */
#define  N_SAMPLE_BUFF    (2)            /* Число пакетов в буфере */


/* Перечисление шагов конфигурирования кодека */
typedef enum 
{
  CONFIG_NONE = 0,         
  HARD_RESET,          
  SOFT_REG_RESET,
  SET_IRQ_CLOCK,
  SET_POWER_SAVE,
  SET_VOCODER,
  SET_SYNC,
  SET_EXCODECCONT_A,
  SET_EXCODECCONT_B,
  SET_EXCODECCONT_C,
  SET_EXCODECCONT_D,
  SET_EXCODECCONT_E,
  SET_IDD,
  SET_HIGH_WATER,
  SET_LOW_WATER,
  SET_OUT_GAIN   
}config_step_t;	


/* Перечисление сообщение для кодека */
typedef enum 
{
  NONE_EV = 0,          /* Пустое сообщение             */
  IRQ_CODEC_EV,         /* Прерывание от кодека         */
  SYNC_CODEC_EV,        /* Прерывание по SYNC для кодека*/  
  TIMEOUT_EV,           /* Вышло время ожидания         */
  MIC_EV,               /* Включаем режим микрофона     */
  SPEAKER_EV            /* Включаем режим спикера       */
}data_event_list_t;	

/** 
  * @brief  Перечисления состояний автомата кодека  
  */ 
typedef enum
{ 
  FSM_NONE = 0,  
  FSM_INIT_POINT,    
  FSM_WAIT_INIT_CMX,
  FSM_INIT_CMX,
  FSM_SPEAKER,
  FSM_SPEAKER_MUTE,
  FSM_SET_SPEAKER_A,
  FSM_SET_SPEAKER_B,  
  FSM_SET_SPEAKER_C,
  FSM_MIC,  
  FSM_MIC_MUTE,
  FSM_SET_MIC_A,
  FSM_SET_MIC_B,  
  FSM_SET_MIC_C,
}fsm_codec_t;

// Максимальное число каналов
#define MAX_CHANEL_CONTROL       32

// Автомат работы модуля формирования голосового пакета и отправки его в роутер
typedef enum 
{
  WAIT_BOX = 0,           // Ожидание пакетов
  ONE_RECEIVE_BOX,        // 1 пакет в буфере
  TWO_RECEIVE_BOX,        // 2 пакета в буфере
  THREE_RECEIVE_BOX,      // 3 пакета в буфере
  RECEIVE_BOX_SEND_FRAME, // Прием пакета - передача фрейма
  RECEIVE_BOX_PASS_FRAME, // Прием пакета - пропуск передачи фрейма
}fr_to_router_fst_t;	

// Автомат работы модуля приема голосового пакета из роутера и отправки его в CMX
typedef enum 
{
  WAIT_CAPT = 0,       // Ожидание пакетов
  CAPT_SRC,            // Захват канала
}router_to_fr_fst_t;	

#define NULL_EMPTY_PHY_ADDR   (0x0000) /* Константа пустого адреса */   
#define MAX_BUF_RX_PCM_BOX       (3)   /* Приемный буфер несжатого звука размером в 3 пакета                */
#define MAX_START_BUFFER_STREAM  (2)   /* Число пакетов в буфере несжатого звука для захвата потока канала  */    
#define MAX_EMPTY_INTERVAL       (2)   /* Максимальное число пустых интервал в захваченом потоке канала     */

/** 
  * @brief  описание структуры сообщений кодека 
  */ 
typedef __packed struct 
{
  uint8_t               index_codec;           /* индекс кодека индивидуального сообщения    */
  union                         
  {       
    uint8_t             damp_data_event;       /* дамп события для кодека                    */  
    data_event_list_t   data_event;            /* тип события для кодека                     */
  };
  union   
  {
    uint8_t              data_codec;            /* данные сообщения для кодека                */
    uint16_t             word_codec;            /* данные сообщения для кодека                */    
  };
}mes_codec_t;

/* Константа шума для несжатого звука */
#define PCM_NOISE_16_CONST  (0x0000)  
#define PCM_NOISE_32_CONST  (0x00000000)  

/* Перичисление для описания статуса пакетов в буфере */
typedef enum 
{
  BOX_EMPTY = 0,      /* Пакет пуст            */
  BOX_FULL,           /* В Пакете есть данные  */
}flag_box_t;

/** 
* @brief  описание структуры пакета несжатого звука для буфера приемника  
  */ 
typedef __packed struct
{  
  soft_router_box_t  router_box;                   /* пакет с голосовыми данными             */ 
  flag_box_t         flag_box;                     /* статус пакета                          */  
} pcm_box_t;

/* Перичисление для описания статуса потока данных */
typedef enum 
{
  INIT_STREAM = 0,     /* Инициализация  */
  SLEEP_STREAM,        /* Режим ожидания */
  START_STREAM,        /* Режим запуска  */  
  ACTIVE_STREAM        /* Рабочий ркжим  */
}stream_status_t;	


/* базовая структура codec */
typedef struct 
{
  /*======================================= Переменные области общих данных ================================================*/   
  stream_status_t               codec_status_speaker;           /* статус режима вывода потока спикера                      */ 
  uint8_t                       codec_mic_priority;             /* Текущий приоритет канала микрофона                       */  
  uint8_t                       codec_speaker_priority;         /* Текущий приоритет канала спикера                         */ 
  uint16_t                      codec_cnt_mic_box;              /* Счетчик пакетов в голосовом сообщении в режиме mic       */ 
  /*======================================= Переменные настройки общие     =================================================*/   
  uint16_t                      codec_phy_addr;                 /* Физический адрес шлюза/кодека по умолчанию               */ 
  uint8_t                       codec_ch_id;                    /* Идентификатор канала захвата                             */
  /*========================================================================================================================*/ 
   
  /*========================================================================================================================*/  
  /*======================================= Переменные области данных pcm ==================================================*/   
  /*============================= Переменные идентификации захваченнного канала pcm ========================================*/  
  uint16_t                      pcm_lock_src_phy_addr;          /* Физический адрес источника                               */
  uint16_t                      pcm_lock_dest_phy_addr;         /* Физический адрес получателя                              */ 
  uint16_t                      pcm_lock_codec_phy_addr;        /* Физический адрес шлюза/кодека                            */   
  uint8_t                       pcm_lock_ch_id;                 /* Идентификатор канала                                     */  
  uint8_t                       pcm_lock_ch_priority;           /* Приоритет канала                                         */    
  /*======================================= Переменные настройки интерфейса pcm ============================================*/  
  uint8_t                       pcm_ch_priority;                /* Приоритет канала интерфейса PCM по умолчанию             */   
  /*=======================  Собственные переменные идентификации порта роутера несжатых потоков ===========================*/
  uint8_t                       pcm_index_rd_box;               /* Индекс для приема из буфер роутера                       */   
  soft_router_box_t*            pcm_pfifo_box;                  /* Переменная хранения указателя                            */  
  uint8_t                       pcm_source_port;                /* Собственный индекс порта                                 */
  uint32_t                      pcm_mask_index_port;            /* Маска доступных для приема портов                        */
  uint32_t                      pcm_mask_chanel;                /* Маска доступных каналов                                  */   
  uint8_t                       pcm_type_box;                   /* Формат данных пакета                                     */
  uint8_t                       pcm_cnt;                        /* Cчетчик неприрывности пакетов 0..255                     */
  
  uint32_t                      pcm_cnt_tx_box;                 /* Счетчик переданных пакетов                               */
  uint32_t                      pcm_cnt_tx_err;                 /* Счетчик принятых пакетов c ошибкой                       */   
  uint32_t                      pcm_cnt_rx_box;                 /* Счетчик принятых пакетов                                 */ 
  uint32_t                      pcm_cnt_rx_err;                 /* Счетчик принятых пакетов c ошибкой                       */
  /*======================================= Буфер для хранения несжатых пакетов порта ======================================*/  
  pcm_box_t                     pcm_buf_box[MAX_BUF_RX_PCM_BOX];/* буфер приема пакетов                                     */ 
  uint8_t                       pcm_rd_buf_index;               /* индекс чтения из буфера приема пакетов                   */   
  uint8_t                       pcm_wr_buf_index;               /* индекс записи в буфер приема пакетов                     */   
  
  uint8_t                       pcm_empty_interval_counter;     /* счетчик пустых интервалов */
  stream_status_t               pcm_status_wr;                  /* статус режима записи PCM в кодек                         */   
  /*======================================= Буфер памяти с которым работает контроллер ДМА =================================*/
  int16_t                       data_tx_spi[N_SAMPLE_BUFF][SIZE_SAMPLE_BUFF];            /* Буфер для передачи в SPI        */
  int16_t                       data_rx_spi[N_SAMPLE_BUFF][SIZE_SAMPLE_BUFF];            /* Буфер для приема из SPI         */  
  /*========================================== Аппаратные ресурсы контроллера ДМА  =========================================*/  
  DMA_TypeDef*                  DMA_PORT;                       /*  порт DMA                                                */   
  uint32_t                      RCC_AHBPeriph_DMA;              /*  тактирование DMA                                        */   
  uint32_t                      DMA_Channel_RX;                 /*  Канал DMA для SPI_RX                                    */
  DMA_Stream_TypeDef*           DMA_Stream_RX;                  /*  Поток DMA для SPI_RX                                    */  
  IRQn_Type                     DMA_Stream_RX_IRQn;             /*  Номер прерывания потока DMA для SPI_RX                  */  
  uint32_t                      DMA_Channel_TX;                 /*  Канал DMA для SPI_TX                                    */
  DMA_Stream_TypeDef*           DMA_Stream_TX;                  /*  Поток DMA для SPI_TX                                    */  
  /*========================================================================================================================*/ 
  /*========================================= Аппаратные ресурсы интерфейса РСМ SPI  =======================================*/           
  SPI_TypeDef *                 SPI_PORT;                       /* порт SPI PCM                                             */
  uint8_t                       SPI_GPIO_AF;                    /*                                                          */
  uint32_t                      SPI_RCC_APB_Periph;             /*                                                          */ 
  void                          (*RCC_SPI_ClockCmd)(uint32_t RCC_APB2Periph, FunctionalState NewState);                 
  /*========================================================================================================================*/           
  uint32_t                      MOSI_Pin;                       /* вывод MOSI кодека                                        */
  GPIO_TypeDef*                 MOSI_PORT;                                                                              
  uint32_t                      MOSI_CLK_GPIO;                                                                          
  uint8_t                       MOSI_PinSource;                                                                         
  /*========================================================================================================================*/            
  uint32_t                      MISO_Pin;                       /* вывод MISO кодека                                        */
  GPIO_TypeDef*                 MISO_PORT;                                                                              
  uint32_t                      MISO_CLK_GPIO;                                                                          
  uint8_t                       MISO_PinSource;                                                                         
  /*========================================================================================================================*/  
  uint32_t                      SCK_Pin;                        /* вывод SCK кодека                                         */
  GPIO_TypeDef*                 SCK_PORT;                                                                               
  uint32_t                      SCK_CLK_GPIO;                                                                           
  uint8_t                       SCK_PinSource;                                                                          
  /*========================================================================================================================*/  
  uint32_t                      SEL_Pin;                        /* вывод SEL кодека                                         */
  GPIO_TypeDef*                 SEL_PORT;                                                                               
  uint32_t                      SEL_CLK_GPIO;                                                                           
  uint8_t                       SEL_PinSource;                                                                          
  /*========================================================================================================================*/     
  /*======================================== Переменные области данных cmx =================================================*/
  /*============================= Буфер данных для формирования голосового пакета данных ===================================*/   
  union                         
  {                             
    uint8_t                     cmx_damp_data_tx[sizeof(router_box_t)]; /* Буфер передачи данных как байтовый массив   */
    router_box_t 	        cmx_data_tx;                    /* Буфер передачи данных как пакет протокола интерфейса RS  */
    RSFrameVoice_t              cmx_voice_data_tx;              /* Буфер передачи данных как голосовой фрейм интерфейса RS  */
  };                            
  uint8_t 		        cmx_cnt_index_box;              /* Счетчик индекса передаваемого бокса в пакете             */ 
  uint8_t 		        cmx_cnt_tx_voice_frame;         /* Счетчик индекса неприрывности передаваемых голос. пакетов*/
  uint16_t                      cmx_time_out_tx_box;            /* Переменная тайм аута контроля приема пакетов из кодека   */
  uint16_t                      cmx_time_out_rx_box;            /* Переменная тайм аута контроля приема пакетов из роутера  */

  uint8_t 		        cmx_cnt_index_rx_data;          /* Счетчик индекса бокса в пакете принятом из роутера       */
  uint8_t 		        cmx_cnt_index_start;            /* Индекс бокса в в принятом пакете из роутера с которого   */
                                                                /* начинаем загрузку в кодек           */ 
  uint8_t 		        cmx_old_index_box;              /* Индекс последнего отправленного бокса в кодек            */
  
  fr_to_router_fst_t            fr_to_router_fst;               /* Переменная состояния автомата работы модуля формирования голосового пакета и отправки его в роутер   */
  router_to_fr_fst_t 		router_to_fr_fst;               /* Переменная состояния автомата работы модуля приема голосового пакета из роутера и отправки его в CMX */
  
  /*========================================================================================================================*/  
  QueueHandle_t                 QueueOutCodecCMX;               /* Очередь для получения сжатых голосовых боксов из кодека  */
  QueueHandle_t                 QueueInCodecCMX;                /* Очередь для передачи сжатых голосовых боксов в кодек     */   
  /*============================= Переменные идентификации захваченнного канала cmx ========================================*/  
  uint16_t                      cmx_lock_src_phy_addr;          /* Физический адрес источника                               */
  uint16_t                      cmx_lock_dest_phy_addr;         /* Физический адрес получателя                              */ 
  uint16_t                      cmx_lock_codec_phy_addr;        /* Физический адрес шлюза/кодека                            */   
  uint8_t                       cmx_lock_ch_id;                 /* Идентификатор канала                                     */  
  uint8_t                       cmx_lock_ch_priority;           /* Приоритет канала                                         */    
  /*========================================================================================================================*/ 
  /*======================================= Переменные настройки интерфейса cmx ============================================*/  
  uint8_t                       cmx_ch_priority;                /* Приоритет канала интерфейса СМХ по умолчанию             */   
  /*========================================================================================================================*/ 
  /*======================================== Аппаратные ресурсы интерфейса CMX SPI =========================================*/   
  SPI_TypeDef*                  SPI_CODECx;                     /* указатель на базовый адреc используемого порта SPI       */
  uint8_t                       index_codec;                    /* индекс кодека                                            */
  /*========================================================================================================================*/          
  uint32_t                      CS_Pin;                         /* вывод CS кодека                                          */
  GPIO_TypeDef*                 CS_PORTx;                       /* указатель на базовый адреc  порта вывода CS кодека       */
  uint32_t                      CS_CLK_GPIO;                    /* включение тактирования вывода                            */ 
  /*========================================================================================================================*/           
  uint32_t                      RESET_Pin;                      /* вывод RESET кодека                                       */ 
  GPIO_TypeDef*                 RESET_PORTx;                    /* указатель на базовый адреc  порта вывода RESET кодека    */ 
  uint32_t                      RESET_CLK_GPIO;                 /* включение тактирования вывода                            */   
  /*========================================================================================================================*/ 
  uint32_t                      SYNC_Pin;                       /* вывод SYNC кодека                                        */ 
  GPIO_TypeDef*                 SYNC_PORTx;                     /* указатель на базовый адреc  порта вывода SYNC кодека     */ 
  uint32_t                      SYNC_CLK_GPIO;                  /* включение тактирования вывода SYNC                       */   
  /*========================================================================================================================*/
  uint32_t                      LED_MIC_Pin;                    /* вывод индикации режима MIC кодека                        */ 
  GPIO_TypeDef*                 LED_MIC_PORTx;                  /* указатель на базовый адреc порта индикации режима MIC    */ 
  uint32_t                      LED_MIC_CLK_GPIO;               /* включение тактирования индикации режима MIC              */ 
  /*========================================================================================================================*/   
  uint32_t                      LED_SPK_Pin;                    /* вывод индикации режима SPK кодека                        */ 
  GPIO_TypeDef*                 LED_SPK_PORTx;                  /* указатель на базовый адреc порта индикации режима SPK    */ 
  uint32_t                      LED_SPK_CLK_GPIO;               /* включение тактирования индикации режима SPK              */   
  /*========================================================================================================================*/   
  uint32_t                      IRQ_Pin;                        /* вывод IRQ кодека                                         */   
  GPIO_TypeDef*                 IRQ_PORTx;                      /* указатель на базовый адреc  порта вывода IRQ кодека      */
  uint32_t                      IRQ_CLK_GPIO;                   /* включение тактирования вывода                            */   
  uint32_t                      IRQ_EXTI_Line;                  /* Specifies the EXTI lines to be enabled or disabled.      */ 
  uint8_t                       IRQ_NVICIRQCh;                  /* Specifies the IRQ channel to be enabled or disabled.     */ 
  uint8_t                       IRQ_EXTI_PortSourceGPIOx;        
  uint8_t                       IRQ_EXTI_PinSourcex;              
  /*========================================================================================================================*/ 
  
  
  
  uint8_t                       note_codec_offset;              /* Смещение для уведомлениий                                */ 
  /*------------------------------------------------------------------------------------------------------------------------*/ 
  TimerHandle_t                 xTimer_CODECx;                  /* указатель на программный таймер                          */
  char* const                   pcTimerName;                    /* имя таймера - для отладки                                */
  /*------------------------------------------------------------------------------------------------------------------------*/ 
  fsm_codec_t                   fsm_codec;  
  config_step_t                 step_cnfg;                      /* Шаг конфигурирования кодека                              */
  /*------------------------------------------------------------------------------------------------------------------------*/ 

}pcm_cmx_t;    

#define   MAX_TIME_WAIT_CMX_BOX                 (120)  // Время ожидания получения пакета c CMX (тики FREERTOS)  
#define   MAX_TIME_WAIT_ROUTER_BOX              (300)  // Время ожидания получения пакета c роутера (тики FREERTOS)

#define   SET_TIME_SEND_BOX_INDIV_CH_RSN        (50)   // Минимальный интервал между пакетами запроса индивидуального канала RSN

// Коды команд консоль ПДШ - шлюз CMX    
#define   LISTEN_BROATCAST_CMD                  (0x10) 
#define   RSN_CALL_DISP_CMD                     (0x11)    

/* Период обновления маски прослушки кодеков */
#define   PERIOD_UPDATE_CODEC_LISTING_MASK   (10000)

//базовая структура шлюза codec
typedef struct 
{
  /*--------------------------------------------------------------------------------------------------------------------------*/ 
  /* Буфер приема данных */
  union
  {
    uint8_t                   damp_data_rx[sizeof(router_box_t)]; /* Буфер приема данных как байтовый массив       */
    router_box_t 	      data_rx; 	                               /* Буфер приема данных                           */
    RSFrameVoice_t            voice_data_rx;                           /* Буфер приема данных как голосовой фрейм       */
  }; 

  
  uint8_t 		      cnt_rx_box;                              /* Переменная для хранения состояния счетчика неприрывности принятых пакетов   */
  uint8_t 		      flag_start_cnt_rx_box;                   /* Переменная для хранения состояния счетчика неприрывности принятых пакетов   */

  /*--------------------------------------------------------------------------------------------------------------------------*/ 
  uint8_t                     size_queue_router_cmx;                   /* Зададим размер очереди маршрутизатор - cmx                         */
  uint8_t                     size_queue_cmx_router;                   /* Зададим размер очереди cmx - маршрутизатор                         */  
                                                                       
  uint8_t                     index_router_port;                       /* Переменная для указателя на порт роутера для маршрутизации         */
  port_router_t               set_port_cmx_router;                     /* Структура для инициализации порта роутера для маршрутизации        */
                                                      
  TimerHandle_t               xSoftTimer;                              /* Програмный таймер периодического уведомления задачи                */
  
  TickType_t                  PeriodSoftTimer;                         /* Период уведомления задачи                                          */
  
  uint32_t                    NotifiedValue;                           /* Содержимое сообщения полученного задачей                           */
                                                                      
  uint8_t                     OwnPortID;                               /* Собственный идентификатор порта                                    */
  QueueHandle_t               xQueueCoreCMD;                           /* Открытие очереди для приема MAX_SIZE_QUEUE_CNTRL_CMD комманд       */
  cntrl_cmd_t                 data_core_rx_cmd;                        /* Буфер приема данных комманды                                       */
  cntrl_cmd_t                 data_core_tx_cmd;                        /* Буфер подготовки для передачи данных комманды                      */
  
  uint16_t                    cnt_index_set_mask;                      /* Cчетчик периода обновления маски прослушки                         */
  /*--------------------------------------------------------------------------------------------------------------------------*/  
    
}codec_gate_t;

/* Определение основной структуры шлюза кодека */
extern codec_gate_t PortCMX;     

/* массив CMX кодека */
extern pcm_cmx_t       cmx_pcm[MAX_CODEC_ARRAY];

/* обьявление указателя на группу событий xGate_PCM_Codec_Event */
extern EventGroupHandle_t xGate_PCM_Codec_Event;

/**
  * @brief  Функция прописывания указателей на индивидуальные ресурсы pcm интерфейса кодека  
  * @param  None
  * @retval None
  */
void init_pcm_codec_a(void);

/**
  * @brief  Функция прописывания указателей на индивидуальные ресурсы pcm интерфейса кодека  
  * @param  None
  * @retval None
  */
void init_pcm_codec_b(void);

/**
  * @brief  Функция прописывания указателей на индивидуальные ресурсы pcm интерфейса кодека  
  * @param  None
  * @retval None
  */
void init_pcm_codec_c(void);

/**
  * @brief  Функция прописывания указателей на индивидуальные ресурсы кодека  
  * @param  None
  * @retval None
  */
void init_point_codec_a(void);

/**
  * @brief  Функция прописывания указателей на индивидуальные ресурсы кодека  
  * @param  None
  * @retval None
  */
void init_point_codec_b(void);

/**
  * @brief  Функция прописывания указателей на индивидуальные ресурсы кодека  
  * @param  None
  * @retval None
  */
void init_point_codec_c(void);

#endif /* _CODEC_CMX_H */