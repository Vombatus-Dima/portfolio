/**
  ******************************************************************************
  * @file    udp_voice.h
  * @author  Trembach D.N.
  * @version V3.0.0
  * @date    28-08-2020
  * @brief   Файл контроля UDP шлюза RS/ETH для голосовых потоков
  ******************************************************************************
  * @attention
  * 
  *
  *   
  ******************************************************************************
  */ 
	
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __UDP_VOICE_H
#define __UDP_VOICE_H

/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx.h"
#include "ip4_addr.h"
#include "router_streams.h"
#include "udp_socket.h"
#include "table_spam.h"
#include "core_cntrl_diag.h"
#include "rs_rign.h"
#include "call_gate.h"
#include "rs_frame_header.h"

#if ( ROUTER_SOFT_ENABLE == 1 ) 
#include "soft_router.h"    
#endif /* ROUTER_SOFT_ENABLE == 1 */    

/* Exported types ------------------------------------------------------------*/
/* Exported constants --------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
/* Exported functions ------------------------------------------------------- */


//#define UDP_TX_VOICE_DEBUG        (1)
//#define UDP_RX_VOICE_DEBUG        (1)
//
//#define UDP_TX_ENCODE_VOICE_DEBUG (1)
//#define UDP_RX_ENCODE_VOICE_DEBUG (1)

/* функция конвертирования IP адреса из 4 байт в 32 бита */
#define  CNVRT_IP_ADDR4(a,b,c,d)  (((uint32_t)((d) & 0xff) << 24) | ((uint32_t)((c) & 0xff) << 16) | ((uint32_t)((b) & 0xff) << 8 ) | (uint32_t)((a) & 0xff))

/* Структура для работы с данными сопровождаемыми IP адресом и портом источника                        */
typedef __packed struct
{
  union
  {
    uint32_t     IPaddr_reception;     /* IP адрес источника пакета                                    */
    uint8_t      BtIPadr_reception[4]; /* IP address рассылки в байтах                                 */
  };   
  /* IP порт источника пакета                                                                          */
  uint16_t 	 IPport_reception;	
  union
  { /* Буфер для временного хранения данных как байтовый массив                                        */
    uint8_t             pdamp_buf_reception_eth[sizeof(router_box_t)] ;                                     
    /* Буфер для временного хранения данных как пакет формата RS                                       */
    router_box_t   buf_reception_eth;   
    /* Буфер для временного хранения данных как голосовой фрейм                                        */ 
    RSFrameVoice_t      buf_reception_voice;
    /* Буфер для временного хранения пакетов вызова                                                    */     
    RSFrameCall_t       buf_reception_call;
    /* Буфер для временного хранения данных как пакет тестирования магистрали RS/ETH                   */
    highway_test_box_t  buf_reception_highway;
    /* Буфер для временного хранения данных как пакет адресов рассылки                                 */    
    table_spam_box_t    buf_reception_spam;
    /* Буфер для временного хранения данных как пакет вызова в Eth                                     */
    eth_call_box_t      buf_reception_eth_call;     
    
    eth_call_rec_box_t  buf_reception_eth_call_rec;     
  };
}reception_ip_buf_t; 



/* структура контроля UDP шлюза RS/ETH для голосовых потоков */
typedef struct
{
  /*==============Нельзя смещать udp_socket_t udp_soc;- положение только в шапке структуры!! ============*/
  /*======================== Для корректной работы с функциями в udp_socket.c ===========================*/
  /*===============  Структура для задачи контроля UDP сокета ===========================================*/                           
  udp_socket_t          udp_soc;
  /*============================= Указатель на структуру рассылки =======================================*/
  spam_t*               table_spam;       
  /*======================= Указатель на структуру контроля резервирования ==============================*/
  control_rign_unit_gate_t* cntrl_ring;
  /*============================ Переменный и очередь контроля команд ===================================*/  
  cntrl_cmd_t           BufCMD;
  QueueHandle_t         xQueueCMD;               
  /*================= Структура для инициализации порта роутера для маршрутизации =======================*/
  port_router_t         set_port_router;
  uint8_t               port_index_tab;  /* Индекс порта роутера                                         */
  uint16_t              index_calc_crc;  /* Переменная индекса для подсчета crc                          */     
  
  TimerHandle_t         xSoftTimerUpdate;/*  Програмный таймер периодического уведомления задачи         */
  TimerHandle_t         xSoftTimerDiag;  /*  Програмный таймер запроса подсчета статистики               */  

  /*====================================== Секции рассылки сжатых потоков ===============================*/
  union
  { /* Буфер для временного хранения данных для передачи в ETH                                           */

    
#if ( ROUTER_SOFT_ENABLE == 1 ) 
    /*=================================== Пакеты несжатого звука ========================================*/
    /* Буфер для временного хранения данных для передачи в ETH                                           */
    uint8_t             pdamp_codec_sample_eth[sizeof(soft_router_box_t)] ;
    /* Буфер для временного хранения данных для передачи в ETH */
    soft_router_box_t   buf_codec_sample_eth;       
    /*===================================================================================================*/
#endif /* ROUTER_SOFT_ENABLE == 1 */    
    
    uint8_t             pdamp_buf_rtr_eth[sizeof(router_box_t)] ;                                        
    /* Буфер для временного хранения данных для передачи в ETH                                           */
    router_box_t   buf_rtr_eth;                                                                     
    /* Буфер для временного хранения данных как голосовой фрейм                                          */
    RSFrameVoice_t      buf_voice_rtr_eth;                                                               
    /* Буфер для временного хранения данных как фрейм вызова/подтверждения вызова диспетчера             */
    RSFrameCall_t       buf_call_rtr_eth;
    /* Буфер для временного хранения пакета с данными сопровождаемыми IP адресом и портом источника      */
    reception_ip_buf_t  buf_ip_rtr_eth;   
    /* Буфер для временного хранения данных как пакет тестирования магистрали RS/ETH                     */
    highway_test_box_t  buf_highway_rtr_eth;
    /* Буфер для временного хранения данных как пакет адресов рассылки                                   */    
    table_spam_box_t    buf_spam_rtr_eth;
    /* Буфер для временного хранения данных как пакет вызова в Eth                                       */
    eth_call_box_t      buf_eth_call_rtr_eth;     
  };                                                                                                     

  union                                                                                                  
  { /* Буфер для временного хранения данных принятых                                                    */
    uint8_t             pdamp_buf_eth_rtr[sizeof(router_box_t)];                                           
    /* Буфер для временного хранения данных принятых из ETH                                              */ 
    router_box_t   buf_eth_rtr;                                                                       
    /* Буфер для временного хранения данных как голосовой фрейм                                          */ 
    RSFrameVoice_t      buf_voice_eth_rtr;                                                                 
    /* Буфер для временного хранения данных как фрейм вызова/подтверждения вызова диспетчера             */
    RSFrameCall_t       buf_call_eth_rtr;                             
    /* Буфер для временного хранения пакета с данными сопровождаемыми IP адресом и портом источника      */
    reception_ip_buf_t  buf_ip_eth_rtr;
    /* Буфер для временного хранения данных как пакет тестирования магистрали RS/ETH                     */
    highway_test_box_t  buf_highway_eth_rtr;
    /* Буфер для временного хранения данных как пакет адресов рассылки                                   */    
    table_spam_box_t    buf_spam_eth_rtr;
    /* Буфер для временного хранения данных как пакет вызова в Eth                                       */
    eth_call_box_t      buf_eth_call_eth_rtr;     
    /* Буфер для временного хранения данных как пакет вызова в Eth                                       */    
    eth_call_rec_box_t  buf_eth_call_rec_rtr;     
  };
  
  /*=====================================================================================================*/  
#if ( ROUTER_SOFT_ENABLE == 1 ) 
  /*==============================  Секция переменных програмного роутера   =============================*/
  uint8_t            index_rd_box;              /* Индекс для приема из буфер роутера            */   
  soft_router_box_t* pfifo_box;                 /* Переменная хранения указателя */  
  /* Собственные переменные идентификации порта            */
  uint8_t            index_port;                /* Собственный индекс порта                      */
  uint32_t           mask_index_port;           /* Маска доступных для приема портов             */
  uint32_t           mask_chanel;               /* Маска доступных каналов                       */   
  uint16_t           cnt_index;                 /* Счетчик заполнения данных                     */ 

  uint32_t           cnt_tx_soft_box;           /* Счетчик переданных пакетов                    */
  uint32_t           cnt_tx_soft_err;           /* Счетчик принятых пакетов c ошибкой            */   
  uint32_t           cnt_rx_soft_box;           /* Счетчик принятых пакетов                      */ 
  uint32_t           cnt_rx_soft_err;           /* Счетчик принятых пакетов c ошибкой            */ 

  /*=====================================================================================================*/  
#endif /* ROUTER_SOFT_ENABLE == 1 */

  /*============================== Секция переменных для callback reception =============================*/   
  /* Буфер для хранения принятого пакета с данными сопровождаемыми IP адресом и портом источника         */
  reception_ip_buf_t    buf_callback_reception;
  /* Указатель на исходящюю очередь для данных callback_reception                                        */ 
  QueueHandle_t         QueueReception;  
  /* Переменная индекса для подсчета crc для данных callback_reception                                   */
  uint16_t              index_calc_crc_reception;               
  /*=====================================================================================================*/    
   
  /*=====================  Флаг запроса уведомления о рассылке изменения режима  ========================*/   
  uint8_t               mode_ring_notify;
  /*=====================================================================================================*/  
     
  /*=====================  Флаг события отправки на адресу назначения пакета  ===========================*/   
  uint8_t               Flag_send_addr_dst_gate;
  /*=====================================================================================================*/  
    
  /*=================================  Переменные сервиса и диагностики  ================================*/ 
  uint32_t              cnt_tx_data_box;        /* Подсчет отправленных пакетов с данными                */
  uint32_t              cnt_tx_service_box;     /* Подсчет отправленных пакетов с сервисной командой     */
  uint32_t              cnt_rx_data_box;        /* Подсчет принятых пакетов с данными                    */
  uint32_t              cnt_rx_service_box;     /* Подсчет принятых пакетов с сервисной командой         */
  /*=====================================================================================================*/ 
  
}voice_gate_t;

/**
  * @brief  Функция создания сокета UDP для рассылки голосовых пакетов
  * @param  None
  * @retval None
  */
void Init_UDP_voice(void);

/**
  * @brief  Функция диагностики соединения голосового шлюза RS-UDP.
  * @param uint8_t *NumLink  - указатель на переменную подсчета активных соединений
  * @param uint32_t *NumTxData      - указатель на переменную подсчета переданных пакетов
  * @param uint32_t *NumRxData      - указатель на переменную подсчета полученных пакетов
  * @retval None
  */
void ReqDiagnEthVoice( uint8_t *NumLink , uint32_t *NumTxData , uint32_t *NumRxData );

/**
  * @brief Эта функция приема пакета на порт UDP.
  * @param arg аргумент пользователя ((spam_gate_t *)arg)
  * @param pcb udp_pcb который принял данные
  * @param p буфер пакета который был принят
  * @param addr удаленное IP address с которого пакет был принят
  * @param port удаленный порт с которого пакет был принят
  * @retval None
  */
void UDP_Receive_Voice(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

/**
  * @brief Эта функция для отработки периодических функций задачи и передачи пакетов данных в UDP.
  * @param arg аргумент пользователя ((voice_gate_t *)arg)
  * @retval None
  */
void UDP_Body_Task_Voice(void *arg);

/**
  * @brief  Функция диагностики параметров таблиц рассылки по UDP.
  * @param resp_eth_diag_t *resp_eth_diag  - указатель на пакет дагностики
  * @retval None
  */
void UDPSpamDiagnostic( resp_eth_diag_t *resp_eth_diag );

#endif /* __UDP_VOICE_H */
/************************ (C) COPYRIGHT DEX *****END OF FILE****/

