/**
  ******************************************************************************
  * @file    router_duplicate.h
  * @author  Trembach D.N.
  * @version V1.0.0
  * @date    30-03-2019
  * @brief   Файл содержит функции удаления дублированных пакетов
  ******************************************************************************
  * @attention
  *  Дубликатор вызываем периодически 10 раз в секунду для обновления времени жизни
  *  Дубликатор обрабатывает только типы пакетов указанные в задданой таблице 
  *  Время хранения дубликатора не более заданного.
  *  Получаем пакет проверяем его ID на совпадение с таблицей ID 
  *  Если такой ID есть - проверяем наличиет такого пакета в таблице
  *  Если такой пакет есть отбрасываем, если нет - записываем в таблицу 
  *  Время жизни записи в таблице не должно превышать 20 сек 
  ******************************************************************************
  */ 

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __ROUTER_DUPLICATE_H
#define __ROUTER_DUPLICATE_H

#include "stm32f4xx.h"

// Описание структуры для определения дублированных пакетов
typedef struct NwkRxDuplicate
{
  uint16_t      time;           // Время жизни в млсек
  uint16_t      factory_addr;   // Заводской адрес источника фрейма
  uint8_t       seq;            // Сетевой номер пакета
  uint8_t       id;             // Тип пакета  
} Duplicate_t;

/**
  * @brief  Функция обновления времени жизни меток фреймов
  * @param  uint16_t time_refresh - время обновления
  * @retval None
  *
  */
void Refresh_Duplicate_Table(uint16_t time_refresh);

/**
  * @brief  Функция определение является ли фрейм дублированным 
  * @param  router_box_t* router_box - указатель на тестируемый пакет
  * @retval bool true  - фрейм дублирован
  *              false - фрейм не дублирован 
  */
bool ControlDuplicateFrame(router_box_t* router_box);

#endif /* __ROUTER_DUPLICATE_H */  
/************************ (C) COPYRIGHT DEX 2019 *****END OF FILE**************/

